@{
    ViewBag.Title = "PayrollCalculations";
}

@System.Web.Optimization.Scripts.Render("~/bundles/datatable")
@System.Web.Optimization.Styles.Render("~/bundles/datepickercss")
@System.Web.Optimization.Scripts.Render("~/bundles/datepicker")
<link href="~/Content/css/select2.min.css" rel="stylesheet" />
<script src="~/Scripts/select2.min.js"></script>
<link href="~/Content/bootstrap-datepicker.css" rel="stylesheet" />
<script src="~/Scripts/DataTable-Excel-Export/dataTables.buttons.min.js"></script>
<script src="~/Scripts/DataTable-Excel-Export/jszip.min.js"></script>
<script src="~/Scripts/DataTable-Excel-Export/pdfmake.min.js"></script>
<script src="~/Scripts/DataTable-Excel-Export/vfs_fonts.js"></script>
<script src="~/Scripts/DataTable-Excel-Export/buttons.html5.min.js"></script>
<script src="~/Scripts/DataTable-Excel-Export/buttons.print.min.js"></script>

<style>
    .nav-tabs .nav-link.active, .nav-tabs .nav-item.show .nav-link {
        color: #495057;
        background-color: #d1d0ceab;
        border-color: #ddd #ddd #fff;
    }


    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    .mts-loading {
        z-index: 50;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 3px;
        position: absolute;
        width: 100%;
        height: 100%;
        padding-top: 5%;
        text-align: center;
        min-height: 113px;
        left: 0;
    }
</style>

<div class="card">
    <div class="card-header text-center">
        <label id="pageHeader">Payroll Process - Monthly</label>
    </div>
    <div class="card-body">
        <div>
            <div class="mts-loading" id="startupspinner">
                <span class="fa fa-spinner fa-spin fa-2x fa-fw"></span>
            </div>
            <div class="col-md-12 row gap-top10" style="margin-top:20px;">
                <div class="col-md-2 p-t-5">
                    <label id="lblMonth">Payroll Month & Year:</label>
                </div>
                <div class="col-md-3">
                    @*data-provide="datepicker"*@
                    <div class="input-group date monthyear">
                        <input type="text" id="txtmonthyear" onkeypress="return false;" onkeydown="return false;" onblur="return false;" onkeyup="return false;" oncut="return false;" onpaste="return false;" placeholder="Month - Year" class="form-control input-sm">
                        <div class="input-group-addon">
                            <span class="fa fa-calendar"></span>
                        </div>
                    </div>
                    <span style="color: red; font: bolder;" id="ErrorMessage"></span>
                </div>
                <div class="col-md-7 p-t-5">
                    <button id="btnViewPayroll" class="btn btn-info btn-sm" onclick="ViewPayrollData('', 1)"><i class="fa fa-eye"></i>&nbsp; View</button> &nbsp;
                    <button id="btnGeneratePayroll" class="btn btn-success btn-sm" onclick="validatePayrollData()"><i class="fa fa-angle-double-right"></i>&nbsp; Generate</button> &nbsp;
                    @if(Session["RoleId"].ToString() == "1")
                    {
                    <button id="btnGeneratePdf" class="btn btn-primary btn-sm" onclick="AdminGenereatePDF()"><i class="fa fa-info-circle"></i>&nbsp; Generate Payslip</button> 
                    }
                    <button id="btnApprovePayroll" class="btn btn-warning btn-sm" onclick="ApprovePayrollData()"><i class="fa fa-share"></i>&nbsp; Approval</button> &nbsp;
                    @*<button id="btnClosePayroll" class="btn btn-primary btn-sm" onclick="ClosePayrollData()"><i class="fa fa-info-circle"></i>&nbsp; Generate Payslip</button>*@ &nbsp;
                    <label id="lblpayrollstatus" class="hide label-warning">Payroll Month is Closed</label> &nbsp;
                    <button id="btnDownloadPayroll" class="btn btn-light btn-sm" onclick="DownloadPayrollData()"><i class="fa fa-address-book"></i>&nbsp; Download Bank Sheet</button> 
                </div>
            </div>
            <div class="col-lg-12 row">
                <div class="col-lg-6">
                    <div class="gap-bottom10 card" id="dvIdAttandance" style="margin-top:10px;" title="Attendance Cut-Off Dates">
                        <div class="row card-body">
                            <div class="col-md-2 p-t-5">
                                <label id="lblMonth"> From:</label>
                            </div>
                            <div class="col-md-3 pull-left">
                                @*data-provide="datepicker"*@
                                <div class="input-group">
                                    <input type="text" id="txtFromdate" disabled="disabled" onkeypress="return false;" onpaste="return false;" class="form-control" />
                                </div>
                                <span style="color: red; font: bolder;" id="ErrorMessage"></span>
                            </div>
                            <div class="col-md-2">
                            </div>
                            <div class="col-md-2 p-t-5">
                                <label id="lblMonth"> To:</label>
                            </div>
                            <div class="col-md-3 pull-left">
                                @*data-provide="datepicker"*@
                                <div class="input-group">
                                    <input type="text" id="txtTodate" onkeypress="return false;" onpaste="return false;" class="form-control" />
                                </div>
                                <span style="color: red; font: bolder;" id="ErrorMessage"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-1">
                </div>
                <div class="col-md-5 gap-bottom10 card pull-right" style="margin-top:10px;" title="Previous Bonus Month Details">
                    <div class="row card-body">
                        <div class="col-md-6 p-t-5">
                            <label id="lblMonth"> Previous Bonus Month:</label>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <input type="text" id="txtPrevBonusdate" disabled="disabled" onkeypress="return false;" title="Bonus Date" onpaste="return false;" class="form-control" />
                                <span id="spanexitbonus"><i class="fa fa-edit p-l-10" style="padding-top:11px;" onclick="LoadPreviousBonusDate()" title="Click to Edit Previous Bonus Date"></i></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="clearfix"></div>
            <div class="col-md-12 row" style="margin-top:10px;">
            </div>
            <div class="clearfix"></div>
            <div class="col-md-12">
                <div class="row m-t-15">
                    <div class="MTS_Table">
                        <table id="getPayrollDetails" class="table table-bordered table-hover tabel-sm table-responsive content-scrollable" cellspacing="0" width="100%">

                            <thead>
                                @*<tr>
                                        <th colspan="2">Name</th>
                                        <th colspan="2">Payroll</th>
                                        <th colspan="7">Earnings</th>
                                        <th colspan="7">Deductions</th>
                                        <th colspan="5">Consolidated Details</th>
                                    </tr>
                                    <tr></tr>*@
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr style="font-weight: bold;">
                                    <td></td>
                                    <td>Total:</td>
                                    <td colspan="4"></td>
                                    <td id="footTotal_Basic"></td>
                                    <td id="footTotal_hra"></td>
                                    <td id="footTotal_special"></td>
                                    <td id="footTotal_medical"></td>
                                    <td id="footTotal_food"></td>
                                    <td id="footTotal_conveyance"></td>
                                    <td id="footTotal_other_ear"></td>
                                    <td id="footTotal_Earnings"></td>
                                    <td id="footTotal_pf"></td>
                                    <td id="footTotal_IT"></td>
                                    <td id="footTotal_pt"></td>
                                    <td id="footTotal_esi"></td>
                                    <td id="footTotal_sudexo"></td>
                                    <td id="footTotal_other_ded"></td>
                                    <td id="footTotal_Deductions"></td>
                                    <td id="footTotal_Net"></td>
                                    <td id="footTotal_Incentive"></td>
                                    <td id="footTotal_exitbonus"></td>
                                    <td id="footTotal_bonus"></td>
                                    <td id="footTotal_reembusment"></td>
                                    <td id="footgrantTotal"></td>
                                    <td colspan="4"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                </div>
            </div>

        </div>

    </div>
</div>
<div class="modal fade" id="EmployeeLOPDetailsModal" data-backdrop="static"></div>
<div class="modal fade" id="EmployeePayrollDetailsModal" data-backdrop="static"></div>
<div class="modal fade" id="PreviousBonusDetailsModal" data-backdrop="static"></div>
<div class="modal fade" id="moduleApprovalPartialView" style="width:inherit" data-backdrop="static"></div>
<div>
    <input type="hidden" class="moduleID" />
    <input type="hidden" id="moduleTwoParameter" />
</div>


<script>
    var closingvalue = 0;
    var groupTable;
    var flagFromInbox = 0;
    var approverFlag;
    $(document).ready(function () {
        $("#startupspinner").hide();

        $(".monthyear").datepicker({
            autoclose: true,
            minViewMode: 1,
            format: 'MM-yyyy'
        }).on("change", function () {
            checkPayrollData();
            getAttandancefromdate();
        });
        CheckApprovar();

        getCurrentMonthDate();

        $('#txtFromdate').datepicker({
            format: "mm/dd/yyyy",
            endDate: '0m',
            autoclose: true
        });

        $('#txtTodate').datepicker({
            format: "mm/dd/yyyy",
            autoclose: true
        });


        var Month = $('#txtmonthyear').val();
        if (Month != "") {
            ViewPayrollData(Month, 1);
            getAttandancefromdate();
            checkPayrollData();
        }

        $('.moduleID').val('');
        $('.moduleID').val('@HRConstants.ModuleConstants.MonthlyPayrollDetails');

        $("#moduleApprovalPartialView").on("hidden.bs.modal", function () {
            inboxCount();
            checkPayrollData();
            getAttandancefromdate();
        });

    });

    function LoadPreviousBonusDate() {
        var prev_bonus_date = $('#txtPrevBonusdate').val();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Payroll/Get_PV_PreviousBonusDetail")',
            success: function (data) {
                //Get_PV_PreviousBonusDetail
                $('#PreviousBonusDetailsModal').html(data);
                $("#PrevBonusDate").val(prev_bonus_date);
                $('#PreviousBonusDetailsModal').modal('show');

            }
        });

    }

    function ViewPayrollData(Month, button) {
        if (Month == "") {
            var Month = $('#txtmonthyear').val();
            if (Month == "") {
                toastr.warning("Please Select Payroll Month & Year");
                return false;
            }
        }


        $.ajax({
            url: '@Url.Action("Read", "Payroll")',
            data: { 'Payroll_Month': Month },
            async: false,
            success: function (data) {
                var ds = JSON.parse(data.result.Data);
                drawdatatable(ds, button);
                if((approverFlag == 1 || approverFlag == 0) && ds.length > 0){
                    $('#btnApprovePayroll').show();
                }

		    checkPayrollData();
                if (button == 2) {
                    if (groupTable != null)
                        groupTable.columns(30).visible(true);
                }
                else {
                    if (groupTable != null)
                        groupTable.columns(30).visible(false);
                }
                groupTable.columns.adjust().draw();
            }
        });

    }

    function getCurrentMonthDate() {
        
        if('@ViewBag.PayrollProcessMonth' != null && '@ViewBag.PayrollProcessMonth' != '' ){
            flagFromInbox += flagFromInbox;
            var payrollMonth = '@ViewBag.PayrollProcessMonth';
            $('#pageHeader').text('');
            $('#pageHeader').text('@ViewBag.Description');
            //payrollMonth = new Date(payrollMonth);
            //var setDate =new Date(payrollMonth.getFullYear(),payrollMonth.getMonth(),1)
            ////$('#txtmonthyear').datepicker( 'setStartDate' , setDate );
            $('#txtmonthyear').val(payrollMonth);
        }
        else{
            $.ajax({
                url: '@Url.Action("GetPayrollMonth", "Payroll")',
                async: false,
                success: function (data) {
                    if (data.result != "" && data.result != null && data.result != undefined) {
                        $("#txtmonthyear").val(data.result);
                    }
                    else {
                        $("#txtmonthyear").val('');
                    }

                }
            });
        }

    }

    function getAttandancefromdate() {
        var Month = $('#txtmonthyear').val();
        $.ajax({
            url: '@Url.Action("GetPayrollFromDate", "Payroll")',
            data: { 'Payroll_Month': Month },
            async: false,
            success: function (data) {
                if (data.result != "" && data.result != null && data.result != undefined) {
                    var date = new Date(data.result);
                    var result = ('0' + (date.getMonth() + 1)).slice(-2) + '/' + ('0' + date.getDate()).slice(-2) + '/' + date.getFullYear();
                    $("#txtFromdate").val(result);
                }
                else {
                    $("#txtFromdate").val('');
                }
                if (data.result1 != "" && data.result1 != null && data.result1 != undefined) {
                    $("#txtPrevBonusdate").val(data.result1);
                }
                else {
                    $("#txtPrevBonusdate").val('');
                }
                if (data.result2 != "" && data.result2 != null && data.result2 != undefined) {
                    var date2 = new Date(data.result2);
                    var result2 = ('0' + (date2.getMonth() + 1)).slice(-2) + '/' + ('0' + date2.getDate()).slice(-2) + '/' + date2.getFullYear();
                    $("#txtTodate").val(result2);
                }

            }
        });
    }

    function CheckApprovar(){
        $.ajax({
            type: "POST",
            url: '@Url.Content("~/Module/ReadApprovers")',
            async:false,
            success: function (data) {
                approverFlag = data.success;
                if (data.success == (@HRConstants.UserFlagforApprovalConstants.Initiator) ) {
                    $('#btnApprovePayroll').show();
                    $('#btnApprove').hide();
                    $('#btnReject').hide();
                    approverFlag = 0;
                }
                else if (data.success == (@HRConstants.UserFlagforApprovalConstants.Approver) || data.success == (@HRConstants.UserFlagforApprovalConstants.Both) ) {
                    $('#btnApprovePayroll').show();
                    approverFlag = 1;
                }
                else {
                    $('#btnApprovePayroll').hide();
                }
            }
        });
    }

    function DownloadPayrollData(){
        var Month = $('#txtmonthyear').val();
        var check = new Date(Month);
        if (check != 'Invalid Date') {

            window.location.href = "@Url.RouteUrl(new { Controller = "Payroll", Action = "GetDownloadPayroll" })" + '?Month=' + Month.toString();

        }
    }

    function drawdatatable(ds, button) {
        if ($.fn.DataTable.isDataTable('#getPayrollDetails')) {
            $('#getPayrollDetails').dataTable().fnDestroy();
        }
        var Month = $('#txtmonthyear').val();
        groupTable = $("#getPayrollDetails").DataTable({
            "dom": 'Blfrtip',
            buttons: [{
                extend: 'excelHtml5',
                footer: true,
                className: 'btn btn-primary btn-sm pull-right',
                exportOptions: {
                    columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]  //visible' //
                },

                text: '<img src=@Url.Content("~/Content/images/Excel_14_px.png")> Download',//'<img src="/Content/images/Excel_14_px.png"> Download',
                filename: 'Payroll_Document_' + Month,
                customizeData: function (data) {
                    for (var i = 0; i < data.body.length; i++) {
                        for (var j = 0; j < data.body[i].length; j++) {
                            if (data.header[j] == "Column Name") {
                                data.body[i][j] = '\u200C' + data.body[i][j];
                            }
                        }
                    }
                },

            }],
            "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
            "iDisplayLength": 5,
            "bFilter": true,
            "scrollX": true,
            "bProcessing": true,
            "data": ds,
            "aoColumns":
      [{ "mData": "ID", "sTitle": "SI.No", "bVisible": false, "sClass": "text-right" }//0
      , { "mData": "EMP_NO", "sTitle": "Employee No", "sClass": "text-left" }//1
      , { "mData": "Employee_Name", "sTitle": "Employee Name", "sClass": "text-left" }//2
      , { "mData": "Dateofjoin", "sTitle": "Joined Date", "sClass": "text-center" }//3
      , { "mData": "PAYROLL_MONTH", "sTitle": "Payroll Month", "sClass": "text-left", "bVisible": false }//4
      , { "mData": "PAYROLL_YEAR", "sTitle": "Payroll Year", "sClass": "text-left", "bVisible": false }//5
      , { "mData": "BASIC_PAY", "sTitle": "Basic Pay", "sClass": "text-left" }//6
      , { "mData": "HOUSE_RENT", "sTitle": "House Allowance", "sClass": "text-left", "bVisible": false }//7
      , { "mData": "Special_Allowance", "sTitle": "Special Allowance", "sClass": "text-center", "bVisible": false }//8
      , { "mData": "Medical_Allowance", "sTitle": "Medical Allowance", "sClass": "text-center", "bVisible": false }//9
      , { "mData": "Food_Allowance", "sTitle": "Food Allowance", "sClass": "text-center", "bVisible": false }//10
      , { "mData": "Conveyance", "sTitle": "Conveyance", "sClass": "text-center", "bVisible": false }//11
      , { "mData": "OTHER_EARNINGS", "sTitle": "Other Earnings", "sClass": "text-center"}//12
      , { "mData": "Gross_Earnings", "sTitle": "Gross Earnings", "sClass": "text-center" }//13
      , { "mData": "PF_DETECTION", "sTitle": "Employee PF", "sClass": "text-center" }//14
      , { "mData": "Income_Tax", "sTitle": "Income Tax", "sClass": "text-center" }//15
      , { "mData": "Professional_Tax", "sTitle": "Professional Tax", "sClass": "text-center" }//16
      , { "mData": "ESI_DEDUCTION", "sTitle": "Employee ESI", "sClass": "text-center" }//17
      , { "mData": "SUDEXO_DEDUCTION", "sTitle": "Meal Card", "sClass": "text-center" }//18
      , { "mData": "OTHER_DEDUCTIONS", "sTitle": "Other Deductions", "sClass": "text-center" }//19
      , { "mData": "Total_Deductions", "sTitle": "Total Deductions", "sClass": "text-center" }//20
      , { "mData": "NET_MONTHLY_SALARY", "sTitle": "Net Salary", "sClass": "text-center"}//21
      , { "mData": "INCENTIVE", "sTitle": "Incentive", "sClass": "text-center", "bVisible": false }//22
      , { "mData": "EXIT_BONUS", "sTitle": "Exit Bonus", "sClass": "text-center" }//23
      , { "mData": "REEMBUSMENT_CHARGES", "sTitle": "Reimbursement Charges", "sClass": "text-center", "bVisible": false }//24
      , { "mData": "BONUS", "sTitle": "Employee Bonus", "sClass": "text-center", "bVisible": false }//25
      , { "mData": "CTC_TOTAL", "sTitle": "Grand Total", "sClass": "text-center", "bVisible": false }//26
      , { "mData": "TOTAL_DAYS", "sTitle": "Total Days", "sClass": "text-center" }//27
      , { "mData": "Paid_Days", "sTitle": "Paid Days", "sClass": "text-center" }//28
      , { "mData": "LOP_DAYS", "sTitle": "Lop Days", "sClass": "text-center" }//29
      , { "mData": "Id", "sTitle": "Edit", "sClass": "text-center" }//30
      , { "mData": "Id", "sTitle": "View", "sClass": "text-center" }//31
      , { "mData": "PAYROLL_EOM",  "bVisible": false }//32

      ],
            "aoColumnDefs":
          [
               {
                   "aTargets": [29]
              , "mRender": function (data, type, row) {
                  return '<span onclick="OpenEmployeeLOPDetails(this,' + button + ')" style="color:blue;cursor:pointer;text-decoration:underline">' + data + '</span>'
              }
               },
              {
                  "aTargets": [30]
              , "mRender": function (data, type, row) {
                  var item = row.ID;
                  return '<button="" onclick="OpenPayrollDetails(' + item + ',this' + ',1)"><i class="fa fa-pencil"/></button>'
              }
              },
               {
                   "aTargets": [31]
              , "mRender": function (data, type, row) {
                  var item = row.ID;
                  return '<button="" onclick="OpenPayrollDetails(' + item + ',this' + ',2)"><i class="fa fa-bars"/></button>'
              }
               }
          ],
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;

                // Remove the formatting to get integer data for summation
                var intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[\$,]/g, '') * 1 :
                        typeof i === 'number' ?
                        i : 0;
                };

                BasicTotal = api
               .column(6)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_Basic').text(BasicTotal);

                HraTotal = api
               .column(7)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_hra').text(HraTotal);

                specialTotal = api
                .column(8)
                .data()
                .reduce(function (a, b) {
                    return parseFloat(intVal(a) + intVal(b));
                }, 0);

                $('#footTotal_special').text(specialTotal);

                MedicalTotal = api
               .column(9)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_medical').text(MedicalTotal);

                FoodTotal = api
               .column(10)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_food').text(FoodTotal);

                ConveyanceTotal = api
               .column(11)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_conveyance').text(ConveyanceTotal);

                EarningsothersTotal = api
               .column(12)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_other_ear').text(EarningsothersTotal);


                EarningsTotal = api
               .column(13)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_Earnings').text(EarningsTotal);

                EPfTotal = api
              .column(14)
              .data()
              .reduce(function (a, b) {
                  return parseFloat(intVal(a) + intVal(b));
              }, 0);

                $('#footTotal_pf').text(EPfTotal);

                ITTotal = api
              .column(15)
              .data()
              .reduce(function (a, b) {
                  return parseFloat(intVal(a) + intVal(b));
              }, 0);

                $('#footTotal_IT').text(ITTotal);

                PTTotal = api
              .column(16)
              .data()
              .reduce(function (a, b) {
                  return parseFloat(intVal(a) + intVal(b));
              }, 0);

                $('#footTotal_pt').text(PTTotal);

                EsiTotal = api
              .column(17)
              .data()
              .reduce(function (a, b) {
                  return parseFloat(intVal(a) + intVal(b));
              }, 0);

                $('#footTotal_esi').text(EsiTotal);

                SudexoTotal = api
              .column(18)
              .data()
              .reduce(function (a, b) {
                  return parseFloat(intVal(a) + intVal(b));
              }, 0);

                $('#footTotal_sudexo').text(SudexoTotal);

                OtherDeductionTotal = api
              .column(19)
              .data()
              .reduce(function (a, b) {
                  return parseFloat(intVal(a) + intVal(b));
              }, 0);

                $('#footTotal_other_ded').text(OtherDeductionTotal);

                DeductionsTotal = api
               .column(20)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_Deductions').text(DeductionsTotal);

                NetTotal = api
               .column(21)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_Net').text(NetTotal);

                IncentiveTotal = api
               .column(22)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_Incentive').text(IncentiveTotal);

                ExitBonusTotal = api
                .column(23)
                .data()
                .reduce(function (a, b) {
                    return parseFloat(intVal(a) + intVal(b));
                }, 0);

                $('#footTotal_exitbonus').text(ExitBonusTotal);
                
                Total_bonus = api
                .column(24)
                .data()
                .reduce(function (a, b) {
                    return parseFloat(intVal(a) + intVal(b));
                }, 0);

                $('#footTotal_bonus').text(Total_bonus);

                ReembusmentTotal = api
               .column(25)
               .data()
               .reduce(function (a, b) {
                   return parseFloat(intVal(a) + intVal(b));
               }, 0);

                $('#footTotal_reembusment').text(ReembusmentTotal);


                CtcTotal = api
                 .column(26)
                 .data()
                 .reduce(function (a, b) {
                     return parseFloat(intVal(a) + intVal(b));
                 }, 0);

                $('#footgrantTotal').text(CtcTotal);
            }
        });
    }

    function validatePayrollData(){
        var Month = $('#txtmonthyear').val();
        getClosingPeriodLastMonth(Month);
        if (closingvalue == 0) {
            GeneratePayrollData();
        }
        else {
            const monthNames = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
            ];

            var d = new Date();
            var prev_date = new Date(d.setMonth(d.getMonth() - 1, 1));
            var sysmonth = monthNames[prev_date.getMonth()];
            var sysyear = prev_date.getFullYear();

            datepickval = Month.split("-");
            var selmonth = datepickval[0].trim();
            var selyear = datepickval[1].trim();


            if(selmonth == sysmonth && selyear == sysyear){
                GeneratePayrollData();
            }
            else{
                toastr.warning("Selected Payroll Month & Year is not valid for processing");
                return false;
            }

        }
    }

    function GeneratePayrollData() {
        var Month = $('#txtmonthyear').val();
        var Attandance_From = $('#txtFromdate').val();
        var Attandance_To = $('#txtTodate').val();

        if (Attandance_To == "" || Attandance_To == null) {
            toastr.warning("Please select Attendance To Date");
            return false;
        }

        if (new Date(Attandance_From) > new Date(Attandance_To)) {
            toastr.warning("Attendance To should be greater than Attendance From");
            return false;
        }

        // end - start returns difference in milliseconds
        var diff = (new Date(Attandance_To) - new Date(Attandance_From));

        // get days
        var days = diff / 1000 / 60 / 60 / 24;
        if (days > 25 && days < 35) {
            //no issue
        }
        else {
            toastr.warning("Attendance From and Attendance To should have difference between 25 to 35 days only");
            return false;
        }

        if (Month != "") {

            YesNo = {
                'confirm': {
                    label: '<i class="fa fa-check"></i>&nbsp;Yes',
                    className: 'btn-primary pull-right gap-right5'
                },
                'cancel': {
                    label: '<i class="fa fa-times"></i>&nbsp;No',
                    className: 'btn-primary pull-right'
                }
            };
            bootbox.confirm({
                title: 'Payroll Confirmation',
                message: "Are you sure, Do You want to Generate payroll for the selected month?",
                buttons: YesNo,
                callback: function (result) {
                    if (result) {
                        $.ajax({
                            url: '@Url.Action("GetPayrollDetails", "Payroll")',
                            data: { 'Payroll_Month': Month, 'AttandanceFrom': Attandance_From, 'AttandanceTo': Attandance_To },
                            async: false,
                            success: function (data) {
                                if (data.result.Data != "-1") {
                                    ViewPayrollData(Month, 2);
                                }
                                else {
                                    toastr.warning("Failed to Retrive");
                                    return false;
                                }

                            }
                        });
                    }
                    else {
                        toastr.warning("Process Cancelled");
                    }
                }

            });
        }
        else {
            toastr.warning("Please select Payroll Month & Year");
            return false;
        }

    }

    function AdminGenereatePDF() {
        var dateval = $("#txtmonthyear").val();
        if(dateval != null && dateval != ""){
            dateval = dateval.replace("-", "/");
            var dparts = dateval.split("/");
            var datevalue = dparts[1] + "/" + dparts[0];
        }

        var datas = {
            Payform: 0,
            Date: datevalue
        }
        $.ajax({
            type: 'POST',
            async: false,
            url: '@Url.Content("~/PaySlip_Form16/PaySlip_Form16")',
            headers: {
                auth:"admin"
            },
            data: datas,

            success: function (result) {

                if (result == 0) {
                    toastr.error("No File Generated");
                }
                    @*  else if (result == 1) {
                      var left = (screen.width / 2) - (1100 / 2);
                      var top = (screen.height / 2) - (800 / 2);
                      window.open('@Url.Action("File", "PaySlip_Form16")', 'Payslip', 'toolbar=0 scrollbars=no, resizable,width= 1100, height= 800, top=' + top + ', left=' + left);
                  }*@
                else if (result == 2) {
                    window.location.href = '@Url.Action("File", "PaySlip_Form16")';
                }
            }
        });
    }

    function getClosingPeriodLastMonth(Month) {
        $.ajax({
            url: '@Url.Action("CheckPayrollDetails", "Payroll")',
            data: { 'Payroll_Month': Month, 'Flag': 1 },
            async: false,
            success: function (data) {
                if (data.result.Data == "1") {
                    closingvalue = 0;
                }
                else {
                    closingvalue = 1;
                }
            },
            error: function () {
                alert("Failed");
            },
            cache: false
        });
    }

    function ClosePayrollData() {
        var Month = $('#txtmonthyear').val();
        if (Month != "") {
            $("#startupspinner").show();
            $.ajax({
                url: '@Url.Action("ClosePayrollDetails", "Payroll")',
                data: { 'Payroll_Month': Month },
                async: false,
                success: function (data) {
                    if (data.result.Data == "1") {
                        toastr.success("Payroll month is Closed");
                        $("#btnGeneratePayroll").hide();
                        $("#btnClosePayroll").hide();
                        $("#dvIdAttandance").hide();
                        $("#spanexitbonus").hide();
                        $("#btnApprovePayroll").hide();
                        $("#lblpayrollstatus").show();
                        $("#btnGeneratePdf").show();
                        $("#btnDownloadPayroll").show();
                        //AdminGenereatePDF();
                        setTimeout(function(){
                            window.location.href = '@Url.Action("PayrollCalculations", "Payroll")';
                        }, 1000);

                    }
                    else {
                        $("#lblpayrollstatus").hide();
                        $("#btnDownloadPayroll").hide();
                        $("#btnGeneratePdf").hide();
                        $("#spanexitbonus").show();
                        $("#btnApprovePayroll").show();
                        toastr.warning("Failed to Update");
                        $("#startupspinner").hide();
                        return false;
                    }

                }
            });
        }
        else {
            toastr.warning("Please select Payroll Month & Year");
            return false;
        }

    }

    function checkPayrollData() {
        var Month = $('#txtmonthyear').val();
        if (Month != "") {
            $.ajax({
                url: '@Url.Action("CheckPayrollDetails", "Payroll")',
                data: { 'Payroll_Month': Month, 'Flag': 0 },
                async: false,
                success: function (data) {
                    if (data.result.Data == "1") {
                        $("#btnGeneratePayroll").hide();
                        $("#btnClosePayroll").hide();
                        $("#spanexitbonus").hide();
                        $("#dvIdAttandance").hide();
                        $("#btnApprovePayroll").hide();
                        $("#lblpayrollstatus").show();
                        $("#btnDownloadPayroll").show();
                        $("#btnGeneratePdf").show();
                        return true;
                    }
                    else {
                        $("#btnGeneratePayroll").show();
                        $("#btnClosePayroll").show();
                        $("#spanexitbonus").show();
                        $("#dvIdAttandance").show();
                        $("#btnApprovePayroll").show();
                        $("#btnGeneratePdf").hide();
                        $("#lblpayrollstatus").hide();
                        $("#btnDownloadPayroll").hide();
                    }

                }
            });
        }

    }

    function OpenEmployeeLOPDetails(CurrentElement, button) {
        var CurrentRow = CurrentElement.closest("tr");
        var RowData = $('#getPayrollDetails').DataTable().row(CurrentRow).data();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Payroll/Get_PV_EmployeeLossOfPayDetails")',
            success: function (data) {
                $('#EmployeeLOPDetailsModal').html(data);
                $('#EmployeeId').val(RowData.EMP_ID);
                $('#PayrollMonth').val(RowData.PAYROLL_MONTH);
                $('#PayrollYear').val(RowData.PAYROLL_YEAR);
                $('#Month').val(RowData.PAYROLL_MONTH + ' - ' + RowData.PAYROLL_YEAR);
                $('#PayrollMontDisplay').html(RowData.PAYROLL_MONTH + ' - ' + RowData.PAYROLL_YEAR)
                $('#EmployeeName').val(RowData.Employee_Name);
                $('#EmpName').html(RowData.Employee_Name);
                $('#hdnButton').val(button);
                $('#LeaveFrom').datepicker( 'setStartDate', dateFormat(RowData.Dateofjoin));
                $('#LeaveFrom').datepicker( 'setEndDate', dateFormat(RowData.PAYROLL_EOM) );
                $('#LeaveTo').datepicker( 'setStartDate', dateFormat(RowData.Dateofjoin));
                $('#LeaveTo').datepicker( 'setEndDate', dateFormat(RowData.PAYROLL_EOM) );
                $('#EmployeeLOPDetailsModal').modal('show');
            }
        })
    }

    function OpenPayrollDetails(ID, CurrentElement, option) {
        var CurrentRow = CurrentElement.closest("tr");
        var RowData = $('#getPayrollDetails').DataTable().row(CurrentRow).data();
        $.ajax({
            type: 'GET',
            url: '@Url.Content("~/Payroll/Get_PV_EmployeePayrollDeails")',
            success: function (data) {
                $('#EmployeePayrollDetailsModal').html(data);
                $('#PayrollId').val(ID);
                $('#EmployeeId').val(RowData.EMP_ID);
                $('#OptionId').val(option);
                $('#EmpName_Payroll').val(RowData.Employee_Name);
                $("#Empdoj_Payroll").val(RowData.Dateofjoin);
                $("#EmpPfrestriction").val(RowData.IS_PF_RESTRICTION_APPLICABLE);
                $('#Month').val(RowData.PAYROLL_MONTH + ' - ' + RowData.PAYROLL_YEAR);
                $("#Empno_Payroll").val(RowData.EMP_NO);
                $('#EmpName').html(RowData.Employee_Name);
                $('#basicpay').val(RowData.BASIC_PAY);
                $('#hra').val(RowData.HOUSE_RENT);
                $('#special_allowance').val(RowData.Special_Allowance);
                $('#Medical_allowance').val(RowData.Medical_Allowance);
                $('#foodallowance').val(RowData.Food_Allowance);
                $('#Conveyance').val(RowData.Conveyance);
                $('#others').val(RowData.OTHER_EARNINGS);
                $('#totalearnings').val(RowData.Gross_Earnings);
                $('#sudexopass').val(RowData.SUDEXO_DEDUCTION);
                $('#incometax').val(RowData.Income_Tax);
                $('#Professional_Tax').val(RowData.Professional_Tax);
                $('#Employee_Esi').val(RowData.ESI_DEDUCTION);
                $('#Employee_PF').val(RowData.PF_DETECTION);
                $('#othersded').val(RowData.OTHER_DEDUCTIONS);
                $('#total_deduction').val(RowData.Total_Deductions);
                $('#incentives').val(RowData.INCENTIVE);
                $('#Net_Salary').val(RowData.NET_MONTHLY_SALARY);
                $('#Total_Days').val(RowData.Paid_Days);
                $('#lop_Days').val(RowData.LOP_DAYS);

                $('#EmployeePayrollDetailsModal').modal('show');
            }
        })
    }

    function ApprovePayrollData(){
        if($("#txtmonthyear").val() != null && $("#txtmonthyear").val() != '' && $("#txtmonthyear").val() != '0'){

            $.ajax({
                type:'POST'
                , async:false
                , url:'@Url.Content("~/Module/PV_ModuleApproval")'
                , success: function(data){
                    $("#moduleApprovalPartialView").html(data);
                    $("#moduleTwoParameter").val($('#txtmonthyear').val());
                    $('#forwardto').val('');
                    $('#remarks').val('');
                    $('#moduleApprovalPartialView').modal('show');
                }
            });

        }
        else{
            toastr.info('Payroll Month is required');
        }
    }

</script>
